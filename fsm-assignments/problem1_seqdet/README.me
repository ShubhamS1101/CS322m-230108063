# Sequence Detector (Mealy FSM)

This project implements a sequence detector in Verilog using a Mealy state machine. The detector identifies the bit sequence `1101` in a serial input stream and outputs a pulse (`y = 1`) when the sequence is found. The design supports overlapping detections.


## How to Compile, Run, and Visualize
1) Compile using Icarus Verilog:
iverilog -o sim tb_seq_detect_mealy.v seq_detect_mealy.v

2) Run the simulation:
vvp sim

3) Visualize the waveform with GTKWave:
gtkwave waves/dump.vcd

## Expected Behavior
- The FSM continuously monitors the serial input stream (`din`).
- When the subsequence `1101` is detected, it asserts the output (`y = 1`) for one clock cycle.
- Overlapping occurrences of the subsequence are detected as well.

## Test Stream and Expected Pulse Indices
The testbench applies the following input stream (bit per clock, MSB first):
011011011101

Occurrences of the target sequence `1101` appear at the following bit indices (1-based, index = position of the last bit of the detected subsequence):
- **Index 5**  → detection of `1101` (bits 2–5)
- **Index 8**  → overlapping detection of `1101` (bits 5–8)
- **Index 12** → detection of `1101` (bits 9–12)

**Expected output pulses (y=1):** at indices **5, 8, 12**.

## Summary
- **Target sequence:** `1101`  
- **Stream tested:** `011011011101`  
- **Expected detection pulses:** indices **5, 8, 12**  
- **Tools:** Icarus Verilog (`iverilog`, `vvp`) and GTKWave
